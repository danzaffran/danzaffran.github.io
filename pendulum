<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pendulum Visualization</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        #vector-field {
            width: 100%;
            height: 60vh;
        }
        #pendulum-animation {
            width: 100%;
            height: 30vh;
        }
    </style>
</head>
<body>
    <h1>Pendulum Visualization</h1>
    <div id="vector-field"></div>
    <div id="pendulum-animation"></div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const g = 9.81;
            const L = 1.0;
            const gamma = 0.4;
            const theta = [...Array(40).keys()].map(i => -2 * Math.PI + i * (4 * Math.PI / 40));
            const omega = [...Array(40).keys()].map(i => -10 + i * (20 / 40));
            const Theta = [];
            const Omega = [];
            for (let i = 0; i < theta.length; i++) {
                for (let j = 0; j < omega.length; j++) {
                    Theta.push(theta[i]);
                    Omega.push(omega[j]);
                }
            }

            const quiverData = {
                x: Theta,
                y: Omega,
                mode: 'markers',
                marker: { size: 2 }
            };

            Plotly.newPlot('vector-field', [quiverData], {
                title: 'Vector Field of a Pendulum',
                xaxis: { title: 'Angle (theta)' },
                yaxis: { title: 'Angular Velocity (omega)' }
            });

            function pendulumDeriv(state, t) {
                const [theta, omega] = state;
                const dtheta_dt = omega;
                const domega_dt = -(g / L) * Math.sin(theta) - gamma * omega;
                return [dtheta_dt, domega_dt];
            }

            function integratePendulum(initialState, tMax, dt) {
                const t = [...Array(Math.floor(tMax / dt)).keys()].map(i => i * dt);
                let state = initialState;
                const trajectory = [state];
                for (let i = 1; i < t.length; i++) {
                    const [dtheta_dt, domega_dt] = pendulumDeriv(state, t[i]);
                    state = [state[0] + dtheta_dt * dt, state[1] + domega_dt * dt];
                    trajectory.push(state);
                }
                return trajectory;
            }

            function animatePendulum(trajectory) {
                const pendulumDiv = document.getElementById('pendulum-animation');
                d3.select(pendulumDiv).selectAll('*').remove();

                const width = pendulumDiv.clientWidth;
                const height = pendulumDiv.clientHeight;
                const svg = d3.select(pendulumDiv).append('svg')
                    .attr('width', width)
                    .attr('height', height);

                const pendulum = svg.append('line')
                    .attr('x1', width / 2)
                    .attr('y1', height / 4)
                    .attr('x2', width / 2)
                    .attr('y2', height / 4 + L * 100)
                    .attr('stroke', 'black')
                    .attr('stroke-width', 2);

                const bob = svg.append('circle')
                    .attr('cx', width / 2)
                    .attr('cy', height / 4 + L * 100)
                    .attr('r', 10)
                    .attr('fill', 'red');

                let i = 0;
                const interval = setInterval(() => {
                    if (i >= trajectory.length) {
                        clearInterval(interval);
                        return;
                    }
                    const theta = trajectory[i][0];
                    const x = L * Math.sin(theta) * 100;
                    const y = L * Math.cos(theta) * 100;
                    pendulum.attr('x2', width / 2 + x)
                        .attr('y2', height / 4 + y);
                    bob.attr('cx', width / 2 + x)
                        .attr('cy', height / 4 + y);
                    i++;
                }, 30);
            }

            document.getElementById('vector-field').on('plotly_click', function(data) {
                const initialState = [data.points[0].x, data.points[0].y];
                const trajectory = integratePendulum(initialState, 50, 0.05);
                const trace = {
                    x: trajectory.map(point => point[0]),
                    y: trajectory.map(point => point[1]),
                    mode: 'lines',
                    line: { color: 'green' }
                };
                Plotly.addTraces('vector-field', trace);

                // Animate pendulum
                animatePendulum(trajectory);
            });
        });
    </script>
</body>
</html>
